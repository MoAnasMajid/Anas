#Installing ultralytics package on google colab to work with it's YOLOv8 model
!pip install ultralytics opencv-python-headless

#Mounting my google drive with colab environment
from google.colab import drive
drive.mount('/content/drive')

#Importing YOLO from ultralytics
from ultralytics import YOLO

# Load a YOLOv8 model 
model = YOLO('yolov8n.pt')

from google.colab.patches import cv2_imshow
import cv2

# Path to the input video file
video_path = '/content/MOT17-09-SDP-raw.webm'

# Open the video file
cap = cv2.VideoCapture(video_path)

# Get video properties
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define the codec and create a VideoWriter object to save the output video
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('output_video.mp4', fourcc, fps, (width, height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Run YOLOv8 detection on the frame
    results = model(frame)

    # Draw bounding boxes on the frame
    for result in results:
        for detection in result.boxes.data:
            x1, y1, x2, y2, score, class_id = map(int, detection)
            label = f'{model.names[class_id]} {score:.2f}'
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Write the frame to the output video
    out.write(frame)

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()
